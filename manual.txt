=======================================================================
MAGICAL THEME SYSTEM - USER MANUAL
Version 3.1
=======================================================================

TABLE OF CONTENTS:
-----------------
1. Introduction
2. Installation
3. Basic Setup
4. Theme Customization
5. Component Reference
   5.1. Buttons
   5.2. Cards
   5.3. Navbar
   5.4. Alerts
   5.5. Popups
   5.6. Preloader
   5.7. Magical Cursor
6. Animation Effects
7. Utility Classes
8. Complete Examples
9. Troubleshooting

=======================================================================
1. INTRODUCTION
=======================================================================

The MagicalTheme is an enhanced object-oriented PHP class that provides 
a beautiful magical girl-themed UI system using Tailwind CSS and the Itim
font. It includes pre-designed components, animations, and effects to 
create engaging web interfaces with minimal effort.

Key Features:
- Vibrant, customizable color schemes (pink, blue, purple)
- Responsive UI components with magical animations
- Shooting star background effects
- Customizable cursor effects
- Interactive alerts and notifications
- Easy navigation system
- Form styling
- Card layouts

=======================================================================
2. INSTALLATION
=======================================================================

1. Include MagicalTheme.php in your project:

   ```php
   require_once 'MagicalTheme.php';
   ```

2. Create an instance of the theme:

   ```php
   $theme = new MagicalTheme(); // Default pink theme
   // Or specify a different theme:
   // $theme = new MagicalTheme('blue');
   // $theme = new MagicalTheme('purple');
   ```

3. Add theme resources to your HTML document head:

   ```php
   <head>
       <meta charset="utf-8">
       <meta name="viewport" content="width=device-width, initial-scale=1">
       <title>My Magical App</title>
       <?php echo $theme->render(); ?>
       <!-- Include Font Awesome for icons -->
       <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
   </head>
   ```

=======================================================================
3. BASIC SETUP
=======================================================================

A typical page structure using MagicalTheme:

```php
<?php
require_once 'MagicalTheme.php';
$theme = new MagicalTheme('pink');
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Magical Application</title>
    <?php echo $theme->render(); ?>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
<body>
    <?php echo $theme->renderNavbar('dashboard.php', [], 'My App'); ?>
    
    <div class="container mx-auto px-4 py-8">
        <div class="magic-card my-4">
            <h2 class="text-xl font-bold mb-4">Welcome!</h2>
            <p class="mb-4">This is a magical application with a beautiful theme.</p>
            <?php echo $theme->renderButton('Get Started', 'primary', 'md', 'start.php', '', 'magic-wand'); ?>
        </div>
    </div>
</body>
</html>
```

=======================================================================
4. THEME CUSTOMIZATION
=======================================================================

4.1 AVAILABLE THEMES
-------------------
The MagicalTheme comes with three pre-defined themes:
- Pink (default): Bright pink and lavender purple
- Blue: Sky blue and indigo
- Purple: Pastel purple and light lavender

To change themes:

```php
$theme->setTheme('blue');
```

To get the current theme:

```php
$currentTheme = $theme->getTheme(); // 'pink', 'blue', or 'purple'
```

To get a list of all available themes:

```php
$availableThemes = $theme->getAvailableThemes(); // ['pink', 'blue', 'purple']
```

4.2 COLOR SYSTEM
--------------
Each theme includes these color variables:
- primary: Main brand color
- secondary: Secondary brand color
- accent: Soft complementary color
- success: Emerald green for success messages
- warning: Amber for warnings
- danger: Red for errors
- light: Light background color
- dark: Dark text color

To get a specific color:

```php
$primaryColor = $theme->getColor('primary'); // Returns hex color code
```

To get all colors:

```php
$allColors = $theme->getAllColors(); // Returns array of all colors
```

4.3 FONTS
-------
The theme uses two fonts:
- Primary: 'Itim', cursive - Used for headings and UI elements
- Secondary: 'Poppins', sans-serif - Used for body text

To get a specific font:

```php
$primaryFont = $theme->getFont('primary');
```

=======================================================================
5. COMPONENT REFERENCE
=======================================================================

5.1 BUTTONS
---------

The renderButton method creates beautiful, themed buttons with various styles.

Syntax:
```php
renderButton($text, $type = 'primary', $size = 'md', $url = null, $additionalClasses = '', 
            $icon = null, $iconRight = false, $animate = true, $id = null, $attributes = [])
```

Parameters:
- $text: The button text
- $type: Button style (primary, secondary, success, warning, danger)
- $size: Button size (sm, md, lg)
- $url: If provided, creates a link instead of a button
- $additionalClasses: Additional CSS classes
- $icon: Font Awesome icon name (without the "fa-" prefix)
- $iconRight: If true, places icon on right side of text
- $animate: Whether to add hover animation
- $id: Optional ID attribute
- $attributes: Array of additional HTML attributes

Examples:

```php
// Basic button
echo $theme->renderButton('Click Me');

// Primary button with icon
echo $theme->renderButton('Submit', 'primary', 'md', null, '', 'check');

// Link button with right-aligned icon
echo $theme->renderButton('View Details', 'secondary', 'sm', 'details.php', '', 'eye', true);

// Large warning button with custom attributes
echo $theme->renderButton('Warning', 'warning', 'lg', null, '', 'exclamation-triangle', false, true, 'warningBtn', ['data-action' => 'warn']);
```

5.2 CARDS
---------

The renderCard method creates beautiful, themed content cards with various styles.

Syntax:
```php
renderCard($content, $type = 'primary', $title = null, $additionalClasses = '', 
          $id = null, $attributes = [], $floating = false, $hoverEffect = true)
```

Parameters:
- $content: The HTML content inside the card
- $type: Card style (primary, secondary, success, warning, danger)
- $title: Optional card title
- $additionalClasses: Additional CSS classes
- $id: Optional card ID attribute
- $attributes: Array of additional HTML attributes
- $floating: Whether to add a gentle floating animation
- $hoverEffect: Whether to add hover transform effect (defaults to true)

Examples:

```php
// Basic card
echo $theme->renderCard(
    '<p>This is a simple card with default styling.</p>'
);

// Card with title and specific type
echo $theme->renderCard(
    '<p>This warning card contains important information.</p>',
    'warning',
    'Warning Notice'
);

// Success card with floating animation
echo $theme->renderCard(
    '<p>Your payment was successful!</p>
     <p class="text-sm text-gray-500 mt-2">Transaction ID: #12345</p>',
    'success',
    'Payment Confirmed',
    '',
    null,
    [],
    true
);

// Card with custom attributes
echo $theme->renderCard(
    '<p>Click this card to view more details.</p>',
    'secondary',
    'Interactive Card',
    'cursor-pointer',
    'custom-card',
    ['onclick' => 'showDetails()']
);
```

You can also combine cards with other components:

```php
echo $theme->renderCard(
    '<p class="mb-4">Are you sure you want to delete this item?</p>
     <div class="flex justify-end space-x-2">
         ' . $theme->renderButton('Cancel', 'secondary', 'sm') . '
         ' . $theme->renderButton('Delete', 'danger', 'sm', null, '', 'trash') . '
     </div>',
    'danger',
    'Confirm Deletion'
);
```

5.3 NAVBAR
--------

The renderNavbar method creates a responsive navigation bar.

Syntax:
```php
renderNavbar($currentPage = '', $customNavItems = [], $websiteName = 'Magical Webapp')
```

Parameters:
- $currentPage: Current page filename to highlight active links
- $customNavItems: Optional additional navigation items
- $websiteName: Website name to show in the navbar

For navigation items, use the following structure:
```php
$navItems = [
    'Dashboard' => [
        'url' => 'dashboard.php',
        'icon' => 'fa-dashboard',
        'active' => false,
        'badge' => null,
        'submenu' => []
    ],
    'Users' => [
        'url' => '#',
        'icon' => 'fa-users',
        'active' => false,
        'badge' => '5',
        'submenu' => [
            'List Users' => 'users.php',
            'Add User' => 'user-add.php',
            'User Groups' => [
                'url' => 'user-groups.php',
                'icon' => 'fa-user-group'
            ]
        ]
    ],
    'Simple Link' => 'page.php'
];

$theme->setNavItems($navItems);
echo $theme->renderNavbar('dashboard.php');
```

To add a single navigation item:
```php
$theme->addNavItem('Reports', [
    'url' => 'reports.php',
    'icon' => 'fa-chart-line',
    'badge' => 'New'
]);
```

5.4 ALERTS
--------

The renderAlert method displays attractive notification alerts.

Syntax:
```php
renderAlert($type, $message)
```

Parameters:
- $type: Alert type (success, error, warning, info)
- $message: Alert message

Examples:
```php
echo $theme->renderAlert('success', 'Your changes have been saved!');
echo $theme->renderAlert('error', 'Something went wrong. Please try again.');
echo $theme->renderAlert('warning', 'This action cannot be undone.');
echo $theme->renderAlert('info', 'Your account will expire in 7 days.');
```

For JavaScript-triggered alerts, you can use the global JS function:
```javascript
createMagicalAlert('success', 'Operation completed successfully!');
```

5.5 POPUPS
--------

The renderPopup method shows a modal popup notification.

Syntax:
```php
renderPopup($message = '', $type = 'success', $afterTime = 0, $showtime = 3000)
```

Parameters:
- $message: The popup message
- $type: Popup type (success, error, warning, info)
- $afterTime: Delay in milliseconds before showing
- $showtime: Duration in milliseconds (0 for manual close only)

Example:
```php
// Show a success popup after 500ms that auto-closes after 3 seconds
echo $theme->renderPopup('Your profile has been updated!', 'success', 500, 3000);

// Show an error popup that requires manual dismissal
echo $theme->renderPopup('Failed to connect to the server.', 'error', 0, 0);
```

5.6 PRELOADER
-----------

The renderPreloader method creates a magical loading screen that shows while your page loads.
This is automatically included when using the render() method with $includePreloader = true.

To manually include only the preloader:
```php
echo $theme->renderPreloader();
```

5.7 MAGICAL CURSOR
---------------

The renderMagicalCursor method adds a special magical cursor with animation effects.
This is automatically included when using the render() method with $includeMagicalCursor = true.

To manually include only the magical cursor:
```php
echo $theme->renderMagicalCursor(true); // true to enable by default
```

Users can toggle the magical cursor effect by clicking the sparkle button in the bottom right corner.

=======================================================================
6. ANIMATION EFFECTS
=======================================================================

6.1 SHOOTING STARS
----------------

The theme includes a beautiful shooting stars background effect.
This is automatically included when using the render() method.

To manually include the stars effect:
```php
echo $theme->renderStarStyles();
echo $theme->ensureStarsContainer();
echo $theme->renderStarAnimation();
```

6.2 CSS ANIMATIONS
---------------

The theme includes several CSS animations that can be used with Tailwind classes:

- animate-float: Gentle floating animation
- animate-sparkle: Twinkling star effect
- animate-spin-slow: Slow spinning animation
- animate-ping-slow: Slow pulsing animation

Example:
```html
<div class="animate-float">This element will float up and down</div>
<span class="animate-sparkle">✨</span>
```

=======================================================================
7. UTILITY CLASSES
=======================================================================

The MagicalTheme provides several utility CSS classes:

7.1 CARDS
-------
```html
<div class="magic-card">
    <h3>Card Title</h3>
    <p>Card content</p>
</div>

<div class="magic-card magic-card-primary">Primary themed card</div>
<div class="magic-card magic-card-secondary">Secondary themed card</div>
<div class="magic-card magic-card-success">Success themed card</div>
<div class="magic-card magic-card-warning">Warning themed card</div>
<div class="magic-card magic-card-danger">Danger themed card</div>
```

7.2 FORM ELEMENTS
--------------
```html
<form class="magic-form">
    <div class="mb-4">
        <label class="block text-gray-700 mb-2">Username</label>
        <input type="text" class="magic-input w-full p-2 border">
    </div>
</form>
```

7.3 BADGES
-------
```html
<span class="magic-badge magic-badge-primary">New</span>
<span class="magic-badge magic-badge-secondary">8</span>
```

7.4 SPECIAL EFFECTS
---------------
```html
<div class="sparkle">This has sparkle effect</div>
<div class="above-stars">This appears above shooting stars</div>
```

=======================================================================
8. COMPLETE EXAMPLES
=======================================================================

EXAMPLE 1: LOGIN PAGE
-------------------

```php
<?php
require_once 'MagicalTheme.php';
$theme = new MagicalTheme('purple');

// Check if form submitted
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Process login
    if ($_POST['username'] === 'admin' && $_POST['password'] === 'password') {
        // Success login
        echo $theme->renderPopup('Login successful!', 'success', 0, 2000);
    } else {
        // Failed login
        echo $theme->renderPopup('Invalid username or password', 'error', 0, 0);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Magical App - Login</title>
    <?php echo $theme->render(); ?>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
<body class="min-h-screen flex items-center justify-center">
    <div class="w-full max-w-md px-4">
        <div class="text-center mb-8">
            <h1 class="text-4xl font-itim text-primary">✨ Magical App</h1>
            <p class="mt-2 text-gray-600">Enter your magical credentials</p>
        </div>
        
        <div class="magic-form">
            <form method="post">
                <div class="mb-6">
                    <label class="block font-itim text-gray-700 mb-2">Username</label>
                    <input type="text" name="username" class="magic-input w-full p-3 border" required>
                </div>
                
                <div class="mb-6">
                    <label class="block font-itim text-gray-700 mb-2">Password</label>
                    <input type="password" name="password" class="magic-input w-full p-3 border" required>
                </div>
                
                <div class="flex items-center justify-between">
                    <?php echo $theme->renderButton('Log In', 'primary', 'lg', null, 'w-full', 'key'); ?>
                </div>
            </form>
        </div>
    </div>
</body>
</html>
```

EXAMPLE 2: DASHBOARD PAGE
----------------------

```php
<?php
require_once 'MagicalTheme.php';
$theme = new MagicalTheme('pink');

// Define navigation items
$navItems = [
    'Dashboard' => [
        'url' => 'dashboard.php',
        'icon' => 'fa-dashboard',
        'active' => true
    ],
    'Users' => [
        'url' => '#',
        'icon' => 'fa-users',
        'badge' => '5',
        'submenu' => [
            'List Users' => 'users.php',
            'Add User' => 'user-add.php'
        ]
    ],
    'Reports' => [
        'url' => 'reports.php',
        'icon' => 'fa-chart-line'
    ],
    'Settings' => 'settings.php'
];
$theme->setNavItems($navItems);
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Magical App</title>
    <?php echo $theme->render(); ?>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
<body>
    <?php echo $theme->renderNavbar('dashboard.php', [], 'Magical Admin'); ?>
    
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-itim mb-8 text-primary">Welcome to your Magical Dashboard</h1>
        
        <!-- Alerts Demo -->
        <div class="mb-8">
            <h2 class="text-2xl font-itim mb-4 text-secondary">Notification System</h2>
            <div class="flex flex-wrap gap-4">
                <?php echo $theme->renderButton('Show Success', 'success', 'md', null, '', 'check', false, true, 'btn-success', ['onclick' => 'createMagicalAlert("success", "This is a success message!")']); ?>
                <?php echo $theme->renderButton('Show Error', 'danger', 'md', null, '', 'times-circle', false, true, 'btn-error', ['onclick' => 'createMagicalAlert("error", "This is an error message!")']); ?>
                <?php echo $theme->renderButton('Show Warning', 'warning', 'md', null, '', 'exclamation-triangle', false, true, 'btn-warning', ['onclick' => 'createMagicalAlert("warning", "This is a warning message!")']); ?>
                <?php echo $theme->renderButton('Show Info', 'secondary', 'md', null, '', 'info-circle', false, true, 'btn-info', ['onclick' => 'createMagicalAlert("info", "This is an information message!")']); ?>
            </div>
        </div>
        
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="magic-card magic-card-primary">
                <h3 class="text-lg font-bold mb-2">Users</h3>
                <p class="text-3xl">1,234</p>
                <p class="text-sm text-gray-600 mt-2">12% increase</p>
            </div>
            
            <div class="magic-card magic-card-secondary">
                <h3 class="text-lg font-bold mb-2">Revenue</h3>
                <p class="text-3xl">$9,876</p>
                <p class="text-sm text-gray-600 mt-2">8% increase</p>
            </div>
            
            <div class="magic-card magic-card-success">
                <h3 class="text-lg font-bold mb-2">Conversions</h3>
                <p class="text-3xl">21%</p>
                <p class="text-sm text-gray-600 mt-2">5% increase</p>
            </div>
            
            <div class="magic-card magic-card-warning">
                <h3 class="text-lg font-bold mb-2">Pending</h3>
                <p class="text-3xl">42</p>
                <p class="text-sm text-gray-600 mt-2">3 new items</p>
            </div>
        </div>
        
        <!-- Button Showcase -->
        <div class="magic-card mb-8">
            <h2 class="text-2xl font-itim mb-4">Button Showcase</h2>
            <div class="flex flex-wrap gap-4 mb-4">
                <?php echo $theme->renderButton('Primary', 'primary', 'md'); ?>
                <?php echo $theme->renderButton('Secondary', 'secondary', 'md'); ?>
                <?php echo $theme->renderButton('Success', 'success', 'md'); ?>
                <?php echo $theme->renderButton('Warning', 'warning', 'md'); ?>
                <?php echo $theme->renderButton('Danger', 'danger', 'md'); ?>
            </div>
            
            <div class="flex flex-wrap gap-4 mb-4">
                <?php echo $theme->renderButton('Small', 'primary', 'sm'); ?>
                <?php echo $theme->renderButton('Medium', 'primary', 'md'); ?>
                <?php echo $theme->renderButton('Large', 'primary', 'lg'); ?>
            </div>
            
            <div class="flex flex-wrap gap-4">
                <?php echo $theme->renderButton('With Icon', 'primary', 'md', null, '', 'star'); ?>
                <?php echo $theme->renderButton('Right Icon', 'secondary', 'md', null, '', 'arrow-right', true); ?>
                <?php echo $theme->renderButton('Link Button', 'success', 'md', 'https://example.com', '', 'external-link'); ?>
            </div>
        </div>
    </div>
</body>
</html>
```

=======================================================================
9. TROUBLESHOOTING
=======================================================================

COMMON ISSUES:

1. Icons Not Showing
   Make sure you've included Font Awesome in your page:
   ```html
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
   ```

2. Preloader Not Hiding
   If the preloader doesn't hide automatically, try forcing it to hide:
   ```javascript
   document.getElementById("magical-preloader").style.display = "none";
   ```

3. Shooting Stars Not Appearing
   Make sure you have a stars container. You can manually add:
   ```php
   echo $theme->ensureStarsContainer();
   ```

4. Custom Colors Not Working
   If custom theme colors aren't showing properly, check that you're calling setTheme() before render():
   ```php
   $theme = new MagicalTheme();
   $theme->setTheme('blue');
   echo $theme->render();
   ```

5. Cursor Effects on Mobile
   The magical cursor is automatically disabled on touch devices. This is by design as it would interfere with touch navigation.

=======================================================================
SUPPORT AND UPDATES
=======================================================================

For more information and updates, please contact the theme developer.

MagicalTheme v3.1 - Crafted with ✨ magic ✨
